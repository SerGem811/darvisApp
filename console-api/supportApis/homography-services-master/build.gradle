buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
}

plugins {
  id 'java'
  id 'org.ajoberstar.grgit' version '2.2.1'
  id 'com.github.breadmoirai.github-release' version '2.2.7'
}

import org.ajoberstar.grgit.Grgit

apply from: 'versioning.gradle'

repositories { }

dependencies { }

def archiveFormat = Compression.GZIP

ext {
  startTime = new Date().format("yyy-MM-dd'T'HH:mm:ssZ")

  // init local mavenUser/pwd

  def gitRepo = Grgit.open(dir: projectDir.toString())
  gitHash = gitRepo.head().id
  gitBranch = gitRepo.branch.current.name
  gitRepo.close()

  currentJvm = org.gradle.internal.jvm.Jvm.current()

  ver = getVersionCode()
  isPrerelease = true
  githubUploadUrl = ''

  if (gitBranch == 'release') {
    logger.lifecycle('Building release branch')
    project.version = ver.replaceAll('-rc.*', '')
    isPrerelease = false
  } else if (gitBranch == 'master') {
    logger.lifecycle('Building master branch')
    project.version = ver
  } else {
    branchVersionIdentifier = gitBranch.replaceAll("[\\W]", "_")
    logger.lifecycle('Building branch: ' + branchVersionIdentifier)
    project.version = ver.replaceAll('-rc.*', '-wip.' + branchVersionIdentifier)
  }

  logger.lifecycle('Version: ' + project.version)

  archiveName = project.name + '-' + project.version + '.tgz'
  binaryPath = "build/distributions/" + archiveName
}

task cleanup(type: Delete) {
  delete 'version.json', 'build/'
}

task versionFile() {
  inputs.files(fileTree("homograpy"))
  inputs.files(fileTree("config"))
  inputs.file("Pipfile")
  inputs.file("Pipfile.lock")
  inputs.file("requirements.txt")
  outputs.file("version.json")

  doLast {
    file ("${projectDir}/version.json").text = """
{
  "title": "${project.name}",
  "version": "${project.version}",
  "build_hash": "${gitHash}",
  "build_branch": "${gitBranch}",
  "build_time": "${startTime}",
  "dependencies": "TBD"
}
    """.stripIndent().trim()
  }
}

task packageDistribution(dependsOn: [versionFile], type: Tar) {
  archiveFileName = project.name + '-' + project.version + '.tgz'
  compression = archiveFormat

  from("${projectDir}") {
    include 'homography/', 'config/', 'Pipfile', 'Pipfile.lock', 'requirements.txt', 'README.md', 'version.json'
  }
}

githubRelease {

  token {return (project.hasProperty('token')) ? project.token : '' }
  owner githubOrg
  repo githubProject
  tagName version
  targetCommitish "master" // by default this is set to "master"
  body ""
  draft false // by default this is false
  prerelease isPrerelease
  releaseAssets binaryPath
}

tasks.githubRelease.dependsOn packageDistribution
